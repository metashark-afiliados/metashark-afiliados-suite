// scripts/supabase/_utils.ts
import chalk from "chalk";
import dotenv from "dotenv";
import path from "path";

/**
 * @file _utils.ts
 * @description Helper de utilidad compartido para los scripts de Supabase.
 *              Ha sido refactorizado a un est√°ndar de √©lite para validar las
 *              variables de entorno can√≥nicas, asegurando que las herramientas
 *              de diagn√≥stico y mantenimiento funcionen en un entorno local
 *              consistente con la nueva arquitectura de configuraci√≥n.
 * @author L.I.A. Legacy
 * @version 3.0.0
 */
export function loadEnvironment(): void {
  const envFile = ".env.local";
  const envPath = path.resolve(process.cwd(), envFile);
  console.log(
    chalk.gray(
      `üîå Cargando variables de entorno desde: ${chalk.yellow(envFile)}`
    )
  );

  const result = dotenv.config({ path: envPath });

  if (result.error) {
    console.error(
      chalk.red.bold(`‚ùå [ERROR CR√çTICO] Archivo de entorno no encontrado.`)
    );
    console.error(
      chalk.white(
        `Aseg√∫rate de que el archivo ${chalk.yellow(
          envFile
        )} exista en la ra√≠z del proyecto.`
      )
    );
    throw new Error(`No se pudo cargar el archivo de entorno: ${envFile}.`);
  }

  // --- INICIO DE REFACTORIZACI√ìN: Alineaci√≥n con SSoT Can√≥nica ---
  // Se validan las claves est√°ndar que deben existir en .env.local para que los
  // scripts funcionen correctamente en un entorno de desarrollo.
  const requiredVars = [
    "NEXT_PUBLIC_SUPABASE_URL",
    "SUPABASE_SERVICE_ROLE_KEY",
    "SUPABASE_DB_URL_DIRECT",
  ];
  // --- FIN DE REFACTORIZACI√ìN ---

  const missingVars = requiredVars.filter((v) => !process.env[v]);

  if (missingVars.length > 0) {
    console.error(
      chalk.red.bold(
        `‚ùå [ERROR CR√çTICO] Variables de entorno requeridas no definidas.`
      )
    );
    console.error(
      chalk.white(
        `Las siguientes variables deben estar definidas en tu archivo ${chalk.yellow(
          envFile
        )}:`
      )
    );
    missingVars.forEach((v) => console.error(chalk.yellow(`  - ${v}`)));
    throw new Error(
      "Configuraci√≥n de entorno incompleta. Faltan variables cr√≠ticas."
    );
  }

  console.log(chalk.green("‚úÖ Variables de entorno cargadas y validadas."));
}

/**
 * =====================================================================
 *                           MEJORA CONTINUA
 * =====================================================================
 *
 * @subsection Melhorias Adicionadas
 * 1. **Sincronizaci√≥n con SSoT de Configuraci√≥n**: ((Implementada)) El helper ahora valida la existencia de las variables de entorno est√°ndar (`NEXT_PUBLIC_SUPABASE_URL`, etc.), aline√°ndose con el nuevo `.env.example` y garantizando que los scripts de utilidad (como `diag:all`) funcionen correctamente en un entorno de desarrollo local.
 * 2. **Cero Regresiones**: ((Implementada)) La l√≥gica de carga de `dotenv` se ha mantenido, asegurando la funcionalidad base.
 *
 * @subsection Melhorias Futuras
 * 1. **Validaci√≥n de Formato**: ((Vigente)) El helper podr√≠a ser mejorado para no solo verificar la existencia de las variables, sino tambi√©n su formato (ej. que la URL de Supabase sea una URL v√°lida) para una detecci√≥n de errores m√°s proactiva.
 *
 * =====================================================================
 */
// scripts/supabase/_utils.ts
